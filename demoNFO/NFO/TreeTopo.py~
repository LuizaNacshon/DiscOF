
from mininet.net import Mininet
from mininet.topolib import TreeTopo


from mininet.node import Node
import NewTopo
from mininet.log import setLogLevel
import sys




from select import poll, POLLIN
from mininet.topo import *
from mininet.node import Controller, OVSSwitch,RemoteController
from mininet.cli import CLI
from time import time,sleep
#import time
import os,csv
import random
import RocketFuelMININERtopo,RocketfuelBigtopo
import MininetTree


random.seed(448)
def chunks( l, n ):
    "Divide list l into chunks of size n"
    return [ l[ i: i + n ] for i in range( 0, len( l ), n ) ]
def startpings( host, targetips ):
    "Tell host to repeatedly ping targets"
#     numofflow=len(targetips)
#     with open("/home/lucky/FinalResults/flowsnumber.csv", "a") as csv_file:
#                  writer = csv.writer(csv_file, delimiter =";",quoting=csv.QUOTE_MINIMAL)
#                  writer.writerow([numofflow])
#     csv_file.close()
    targetips = ' '.join( targetips )

    # Simple ping loop
#     cmd = ( 'while true; do '
#             ' for ip in %s; do ' % targetips +
#             '  echo -n %s "->" $ip ' % host.IP() +
#             '   `ping -c1 -w 1 $ip | grep packets` ;'
#             '  sleep 0;'
#             ' done; '
#             'done ' '1> /home/lucky/FinalResults/pingslog/ping.txt 2>/home/lucky/FinalResults/pingslog/pingerr.txt &')

    cmd = ( 'while true; do '
            ' for ip in %s; do ' % targetips +
            '  echo -n %s "->" $ip ' % host.IP() +
            '   `ping -c1 -w 1 $ip | grep packets` ;'
            '  sleep 1;'
            ' done; '
            'done &')

    print ( '*** Host %s (%s) will be pinging ips: %s' %
            ( host.name, host.IP(), targetips ) )

   
    host.cmd( cmd )



def multiping( netsize,seconds1 ,seconds2):
    "Select topology type:"
    #initialFlowEntries = 800#2100
    numberofpinginghosts =10
    # Create network and identify subnets
    #t = NewTopo.SampleTopo()
    #tree4 = TreeTopo(depth=2,fanout=10)
    t=RocketFuelMININERtopo.SampleTopo()
    #t=RocketfuelBigtopo.SampleTopo()
    #t=MininetTree.CustomTopo()
    net = Mininet(topo=t, controller=lambda a: RemoteController(a, defaultIP='127.0.0.1', port=6633))
    #net = Mininet(topo=tree4)
    net.start()
    
 
    switches = net.switches
    hosts = net.hosts
    numofswitches=len(switches)
    numofhosts = len(hosts)
    networkidentifier = 'Treetopo11router10hostsperrouter'
    #networkidentifier = 'MininetTree11routers'
    try:
        os.remove("/home/lucky/FinalResults/networkTopo.txt")  
    except: 
        print ""
    file = open("/home/lucky/FinalResults/networkTopo.txt", "a")
    file.write(format(numofswitches)) #[0]
    file.write(format('\n'))
    file.write(format(numofhosts)) #[1]
    file.write(format('\n'))
    file.write(format(networkidentifier)) #[2]
    file.write(format('\n'))
    file.write(format(initialFlowEntries))#[3]
    file.write(format('\n'))
    file.write(format(numberofpinginghosts))#[4]
    file.write(format('\n'))
    file.write(format(seconds2))#[5]
    file.write(format('\n'))
    
    file.close()
    #net.pingAll()
    
    counter=0
    
    
    
    
    
    #p = Process(target=mainNFO.func())
    #p.start()
    #p.join()
    
    #os.system("start python PWorkspace/NFO/mainNFO.py")
    
    #p = Popen(["PWorkspace/NFO/mainNFO.py"], shell=True, stdin=PIPE)

    #th.daemon = True
    
    for l in range (1,len(switches)+1):
        os.system("sudo ovs-vsctl add bridge  " +  "s" + format(l) + "  flow_tables 0=@nam1 -- --id=@nam1 create flow_table flow_limit=" + format(initialFlowEntries))
        os.system("sudo ovs-vsctl -- --id=@nf create NetFlow targets=\"127.0.0.1:9996\"  -- -- set bridge s14 netflow=@nf")
        os.system("sudo ovs-vsctl -- --id=@nf create NetFlow targets=\"127.0.0.1:9996\"  -- -- set bridge s15 netflow=@nf")
    #subprocess.call(['PWorkspace/NFO/mainNFO.py'], shell=True)

       
#########################################################RUN 1************************************************************    
    
#     filename = "/home/lucky/FinalResults/flowsnumber.csv"
#     # opening the file with w+ mode truncates the file
#     f = open(filename, "w+")
#     f.close()
    subnets = chunks( hosts, 200 )
    
    # Create polling object
    fds = [ host.stdout.fileno() for host in hosts ]
    poller = poll()
    
    for fd in fds:
        poller.register( fd, POLLIN )
    endTime2 = time() + seconds1
    #endTime2 = 0
    
    
    if(counter==0):
            endTime3=time()+20
            rendomArraysforeachrows = []
            for subnet in subnets:
                print "second subnet",subnet
                ips = [ host.IP() for host in subnet ]
                for host in subnet:
                    ips1=[]
                    
                    temp=[]
                    temp.append(host)
                    for ipss in ips:
                        
                        data = ''.join([bin(int(x)+256)[3:] for x in ipss.split('.')])
                        info = (data[:28] + '')
                        data2 = ''.join([bin(int(x)+256)[3:] for x in host.IP().split('.')])
                        info2 = (data2[:28] + '')
                        
                        if info!=info2:
                            
                            ips1.append(ipss)
                    
                    temp.append(random.sample(ips1,numberofpinginghosts))
                    rendomArraysforeachrows.append(temp)
                           
                     
            while time() < endTime3:
            
                for i in rendomArraysforeachrows:
                    #print "i[0]!!",i[0],i[-1]
                    startpings( i[0], i[-1])
                    for host in hosts:
                        host.cmd( 'kill %while' )
            
            counter=counter+1
    sleep(600)
    #sleep(750)
                


        
    while time() < endTime2:
    #while endTime2<seconds1:
    # Start pings

            
        endTime = time() + seconds2
        #endTime = time() + seconds1

        #endTime =0
                     
        rendomArraysforeachrows = []
                 
        
                     #randomPingslist.append(random.sample(ips,numberofpinginghosts))
                     #adding bogus to generate packet loss
                     #ips.append( '10.0.0.255' )
            
        for subnet in subnets:
            print "second subnet",subnet
            ips = [ host.IP() for host in subnet ]
            for host in subnet:
                ips1=[]
                print "hosttt",host
                temp=[]
                temp.append(host)
                for ipss in ips:
                    
                    data = ''.join([bin(int(x)+256)[3:] for x in ipss.split('.')])
                    info = (data[:28] + '')
                    data2 = ''.join([bin(int(x)+256)[3:] for x in host.IP().split('.')])
                    info2 = (data2[:28] + '')
                    
                    if info!=info2:
                        ips1.append(ipss)
                
                temp.append(random.sample(ips1,numberofpinginghosts))
                rendomArraysforeachrows.append(temp)
                           
                     
        while time() < endTime:
        #while  endTime<seconds2:
            for i in rendomArraysforeachrows:
                #print "i[0]!!",i[0],i[-1]
                startpings( i[0], i[-1])
                for host in hosts:
                    host.cmd( 'kill %while' )
            #endTime=endTime+1
                

        #endTime2=endTime2+1
                         



#     timi=0
#     # Monitor output
#     endTime = time() + 10
#     #endTime = time() + seconds1
#     while time() < endTime:
#     
#         readable = poller.poll(1000)
#         for fd, _mask in readable:
#             node = Node.outToNode[ fd ]
#             print '%s:' % node.name, node.monitor().strip()
#        timi = timi + 1

    
    # Stop pings
    

    
    
    
    
#     for host in hosts:
#         host.cmd( 'kill %while' )
    net.stop()
    

    
if __name__ == '__main__':
    global initialFlowEntries 
#     column = sys.argv[1]
#     with open('/home/lucky/demoNFO/inputsFile.csv') as file:
#         second_line = list(file)[1]
#         arr=second_line.split(',')
#         print arr[int(sys.argv[1])]
        #initialFlowEntries = arr[int(sys.argv[1])]
    initialFlowEntries=2000
    setLogLevel( 'info' )
    multiping( netsize=2, seconds1=5000 ,seconds2=1)
    #seconds1=1000
    #300
    #multiping( netsize=2, chunksize1=5030, chunksize2=50,chunksize3=100,seconds1=120 ,second2=1800,second3=1800)

   # print h1.cmd('ping -c1 %s' % h2.IP(),'1> /tmp/h1.out 2>/tmp/h1.err &' )
#net.stop()